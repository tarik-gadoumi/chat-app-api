/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var ClientExtensionsTransform = require('../transforms/ClientExtensionsTransform');

var ConnectionFieldTransform = require('../transforms/ConnectionFieldTransform');

var FilterDirectivesTransform = require('../transforms/FilterDirectivesTransform');

var FlattenTransform = require('../transforms/FlattenTransform');

var InlineDataFragmentTransform = require('../transforms/InlineDataFragmentTransform');

var InlineFragmentsTransform = require('../transforms/InlineFragmentsTransform');

var RelayApplyFragmentArgumentTransform = require('../transforms/RelayApplyFragmentArgumentTransform');

var RelayConnectionTransform = require('../handlers/connection//RelayConnectionTransform');

var RelayDeferStreamTransform = require('../transforms/RelayDeferStreamTransform');

var RelayFieldHandleTransform = require('../transforms/RelayFieldHandleTransform');

var RelayFlowGenerator = require('../language/javascript/RelayFlowGenerator');

var RelayGenerateIDFieldTransform = require('../transforms/RelayGenerateIDFieldTransform');

var RelayGenerateTypeNameTransform = require('../transforms/RelayGenerateTypeNameTransform');

var RelayMaskTransform = require('../transforms/RelayMaskTransform');

var RelayMatchTransform = require('../transforms/RelayMatchTransform');

var RelayRefetchableFragmentTransform = require('../transforms/RelayRefetchableFragmentTransform');

var RelayRelayDirectiveTransform = require('../transforms/RelayRelayDirectiveTransform');

var RelaySkipHandleFieldTransform = require('../transforms/RelaySkipHandleFieldTransform');

var RelaySplitModuleImportTransform = require('../transforms/RelaySplitModuleImportTransform');

var RelayTestOperationTransform = require('../transforms/RelayTestOperationTransform');

var SkipClientExtensionsTransform = require('../transforms/SkipClientExtensionsTransform');

var SkipRedundantNodesTransform = require('../transforms/SkipRedundantNodesTransform');

var SkipUnreachableNodeTransform = require('../transforms/SkipUnreachableNodeTransform');

var SkipUnusedVariablesTransform = require('../transforms/SkipUnusedVariablesTransform');

var ValidateGlobalVariablesTransform = require('../transforms/ValidateGlobalVariablesTransform');

// Transforms applied to the code used to process a query response.
var relaySchemaExtensions = [RelayConnectionTransform.SCHEMA_EXTENSION, RelayMatchTransform.SCHEMA_EXTENSION, ConnectionFieldTransform.SCHEMA_EXTENSION, RelayRelayDirectiveTransform.SCHEMA_EXTENSION, RelayRefetchableFragmentTransform.SCHEMA_EXTENSION, RelayTestOperationTransform.SCHEMA_EXTENSION, InlineDataFragmentTransform.SCHEMA_EXTENSION, RelayFlowGenerator.SCHEMA_EXTENSION]; // Transforms applied to both operations and fragments for both reading and
// writing from the store.

var relayCommonTransforms = [RelayConnectionTransform.transform, RelayRelayDirectiveTransform.transform, RelayMaskTransform.transform, RelayMatchTransform.transform, ConnectionFieldTransform.transform, RelayRefetchableFragmentTransform.transform]; // Transforms applied to fragments used for reading data from a store

var relayFragmentTransforms = [ClientExtensionsTransform.transform, RelayFieldHandleTransform.transform, InlineDataFragmentTransform.transform, FlattenTransform.transformWithOptions({
  flattenAbstractTypes: true
}), SkipRedundantNodesTransform.transform]; // Transforms applied to queries/mutations/subscriptions that are used for
// fetching data from the server and parsing those responses.

var relayQueryTransforms = [RelayApplyFragmentArgumentTransform.transform, ValidateGlobalVariablesTransform.transform, RelayGenerateIDFieldTransform.transform, RelayDeferStreamTransform.transform, RelayTestOperationTransform.transform]; // Transforms applied to the code used to process a query response.

var relayCodegenTransforms = [SkipUnreachableNodeTransform.transform, RelaySplitModuleImportTransform.transform, InlineFragmentsTransform.transform, // NOTE: For the codegen context, we make sure to run ClientExtensions
// transform after we've inlined fragment spreads (i.e. InlineFragmentsTransform)
// This will ensure that we don't generate nested ClientExtension nodes
ClientExtensionsTransform.transform, FlattenTransform.transformWithOptions({
  flattenAbstractTypes: true
}), SkipRedundantNodesTransform.transform, RelayGenerateTypeNameTransform.transform]; // Transforms applied before printing the query sent to the server.

var relayPrintTransforms = [// NOTE: Skipping client extensions might leave empty selections, which we
// skip by running SkipUnreachableNodeTransform immediately after.
ClientExtensionsTransform.transform, SkipClientExtensionsTransform.transform, SkipUnreachableNodeTransform.transform, FlattenTransform.transformWithOptions({}), RelayGenerateTypeNameTransform.transform, RelaySkipHandleFieldTransform.transform, FilterDirectivesTransform.transform, SkipUnusedVariablesTransform.transform];
module.exports = {
  commonTransforms: relayCommonTransforms,
  codegenTransforms: relayCodegenTransforms,
  fragmentTransforms: relayFragmentTransforms,
  printTransforms: relayPrintTransforms,
  queryTransforms: relayQueryTransforms,
  schemaExtensions: relaySchemaExtensions
};